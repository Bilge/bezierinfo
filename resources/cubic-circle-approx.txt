      <textarea class="sketch-code" data-sketch-preset="arcfitting" data-sketch-title="Cubic Bézier arc approximation">
      void setupCurve() { order = 3; }

      void checkConnect() {
        if(e < PI) { noConnect(); } else { connect(); }
      }

      void findArcFitting() {
        // guess the curve based on the start/mid/end points:
        Point p1 = new Point(dim/2 + dim/f2,dim/2),
              p2 = new Point(dim/2 + dim/f2*cos((s+e)/2), dim/2 + dim/f2*sin((s+e)/2)),
              p3 = new Point(dim/2 + dim/f2*cos(ax), dim/2 + dim/f2*sin(ay));
        BezierCurve guess = comp.generateCurve(3,p1,p2,p3);

        Point oc1 = guess.points[1];

        drawGuess(guess);

        // then, move the control points so that B'(0) and B'(1) are correct:
        Point c1 = comp.lli(new Point[]{
          guess.points[0],
          new Point(p1.x, p1.y+10),
          guess.points[1],
          guess.points[2],
        });

        // taking advantage of symmetry, we trivially know c2 now, too:
        dx = guess.points[1].x - c1.x;
        dy = guess.points[1].y - c1.y;
        Point c2 = new Point(guess.points[2].x + dx,
                             guess.points[2].y + dy);

        // replace, update, and draw.
        guess.points[1] = c1;
        guess.points[2] = c2;
        guess.update();
        guess.draw();

        float a = 0.211325;
        Point pa = guess.getPoint(a);
        pa.draw();
        guess.getPoint(1-a).draw();

/*
        // info
        float phi = abs(s+e), phi2 = phi/2;
        float l = cos(phi/2),
              d = abs(l * dim/f2),
              cx = dim/2 + d * cos(phi/2),
              cy = dim/2 + d * sin(phi/2);
        ellipse(cx,cy,5,5);

        float cbx = cos(phi2) - cos(phi2)*cos(phi2),
              cby = sin(phi2) - sin(phi)/2,
              cax = 4/3 * cbx,
              cay = 4/3 * cby,
              cad = sqrt(cax*cax + cay*cay),
              fax = cx + cax*(dim/f2),
              fay = cy + cay*(dim/f2);

        // draw support frame
        line(guess.points[0].x, guess.points[0].y, guess.points[3].x, guess.points[3].y);
        line(dim/2, dim/2, cx, cy);
        line(cx + (fax-cx)/10, cy+(fay-cy)/10, fax,fay);

        // check vector [ca] for correctness - should overlay "A"
        ellipse(fax,fay,5,5);

        // check vector [ca] for correctness from [start] - should overlay [oc1]
        float ofax = guess.points[0].x + cax*(dim/f2),
              ofay = guess.points[0].y + cay*(dim/f2);
        ellipse(ofax,ofay,9,9);

        // compute length of [start]-[C1] based on angle and [oc1] - should overlay [points[1]]
        float dddd = 4/3 * tan(phi/4);
        ellipse(dim/2 + dim/f2, dim/2 + (dim/f2)*dddd, 9,9);
        //identical computation, for reference:
        //float c1xd = cad / sin(phi2);
        //ellipse(dim/2 + dim/f2, dim/2 + (dim/f2)*c1xd, 9,9);

        // compute [C2] - should overlay [points[2]]
        float c2x = cos(phi) + dddd * sin(phi),
              c2y = sin(phi) - dddd * cos(phi);
        ellipse(dim/2 + (dim/f2)*c2x, dim/2 + (dim/f2)*c2y, 9,9);

        stroke(0);
        float dan = atan((pa.y-dim/2) / (pa.x-dim/2));
        line(dim/2, dim/2, dim/2 + (dim/f2) * cos(dan), dim/2 + (dim/f2) * sin(dan));
*/
      }</textarea>